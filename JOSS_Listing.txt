A---E000+    A  0 100 0000 000,0000     TERMINATION SIGNAL
A---E001     A  1 000 0000 001,6001     1
A---E002     A  2 000 0000 001,6002     2
A---E003     A  3 000 0000 001,5003     3
A---E004     A  4 000 0000 001,6004     4
A---E005     A  5 000 0000 001,5005     5
A---E006     A  6 000 0000 001,5006     6
A---E007     A  7 000 0000 001,4007     7
A---E008     A  8 000 0000 001,6010     8
A---E009     A  9 000 0000 001,5011     9
A---E010     A 10 000 0000 000,4016
A---E011     A 11 000 0000 000,4016
A---E012     A 12 000 0000 000,4016
A---E013     A 13 000 0000 000,4016
A---E014     A 14 000 0000 000,4016     SPACE
A---E015     A 15 000 0000 000,4016
A---E016     A 16 000 0000 000,4016     SEMICOLON
A---E017     A 17 001 V  1 002,5021     LCA
A---E018     A 18 002 V  2 002,5022     LCB
A---E019     A 19 003 V  3 002,4023     LCC
A---E020     A 20 004 V  4 002,5024     LCD
A---E021     A 21 005 V  5 002,4025     LCE
A---E022     A 22 006 V  6 002,4026     LCF
A---E023     A 23 007 V  7 002,3027     LCG
A---E024     A 24 010 V  8 002,5030     LCH
A---E025     A 25 011 V  9 002,4031     LCI
A---E026     A 26 000 0000 000,4016
A---E027     A 27 000 0000 000,3033     .
A---E028     A 28 000 0000 000,4016
A---E029     A 29 000 0000 000,4016
A---E030     A 30 000 0000 000,3036     EJECT+CR+EOM
A---E031     A 31 000 0000 000,2037     EJECT+CR
A---E032     A 32 000 = 33 240,6040     MULTIPLY DOT
A---E033     A 33 012 V 10 002,5041     LCJ
A---E034     A 34 013 V 11 002,5042     LCK
A---E035     A 35 014 V 12 002,4043     LCL
A---E036     A 36 015 V 13 002,5044     LCM
A---E037     A 37 016 V 14 002,4045     LCN
A---E038     A 38 017 V 15 002,4046     LCO
A---E039     A 39 020 V 16 002,3047     LCP
A---E040     A 40 021 V 17 002,5050     LCQ
A---E041     A 41 022 V 18 002,4051     LCR
A---E042     A 42 100 0000 000,4052     CR+EOM+TERMINAL SIGNAL IN SIGN
A---E043     A 43 002 0000 004,3053     =
A---E044     A 44 000 0000 140,4054     -
A---E045     A 45 000 0000 000,3416     CONDITION FLAG (CHAR 055 CAN'T GET IN)
A---E046     A 46 000 0000 000,4016
A---E047     A 47 000 0000 000,4016
A---E048     A 48 000 0000 001,5060     ZERO
A---E049     A 49 000 0000 240,4061     /
A---E050     A 50 023 0000 002,4062     LCS
A---E051     A 51 024 0000 002,3063     LCT
A---E052     A 52 025 0000 002,4064     LCU
A---E053     A 53 026 0000 002,3065     LCV
A---E054     A 54 027 0000 002,3066     LCW
A---E055     A 55 030 0000 002,2067     LCX
A---E056     A 56 031 0000 002,4070     LCY
A---E057     A 57 032 0000 002,3071     LCZ
A---E058     A 58 000 0000 000,4016

A---E059     A 59 000 0000 000,2073     ,
A---E060     A 60 000 = 31 140,3074     +
A---E061     A 61 000 0000 000,2075     TAB
A---E062     A 62 000 0000 000,4016
A---E063     A 63 000 0000 000,4016
A---E064     A 64 000 0000 000,4016
A---E065     A 65 000 0000 000,5101     PRIME
A---E066     A 66 000 0000 000,5102     QUOTE MARKS
A---E067     A 67 000 0000 000,4016     STRIKE OUT CHARACTER = SPACE
A---E068     A 68 000 0000 000,5104     S
A---E069     A 69 003 0000 000,4105     LESS THAN OR =
A---E070     A 70 006 0000 004,4106     GREATER THAN OR =
A---E071     A 71 001 0000 004,3107     LESS THAN
A---E072     A 72 004 0000 004,5110     GREATER THAN
A---E073     A 73 000 A112 020,4111     (
A---E074     A 74 000 0000 000,4016
A---E075     A 75 000 0000 000,4016
A---E076     A 76 000 0000 000,4016
A---E077     A 77 000 0000 000,4016
A---E078     A 78 000 0000 000,4016
A---E079     A 79 000 0000 000,4016
A---E080     A 80 000 0000 000,5120     COLON
A---E081     A 81 041 V 27 002,4121     A
A---E082     A 82 042 V 28 002,4122     B
A---E083     A 83 043 V 29 002,3123     C
A---E084     A 84 044 V 30 002,4124     D
A---E085     A 85 045 V 31 002,3125     E
A---E086     A 86 046 V 32 002,3126     F
A---E087     A 87 047 V 33 002,2127     G
A---E088     A 88 050 V 34 002,4130     H
A---E089     A 89 051 V 35 002,3131     I
A---E090     A 90 000 0000 002,4016
A---E091     A 91 000 A123 002,2133     RIGHT BRACKET
A---E092     A 92 000 0000 002,4016
A---E093     A 93 000 0000 002,4016
A---E094     A 94 000 0000 002,4016
A---E095     A 95 000 0000 002,4016
A---E096     A 96 000 A 96 002,5140     ABS VAL BAR
A---E097     A 97 052 V 36 002,4141     J
A---E098     A 98 053 V 37 002,4142     K
A---E099     A 99 054 V 38 002,3143     L
A---E100     A100 055 V 39 002,4144     M
A---E101     A101 056 V 40 002,3145     N
A---E102     A102 057 V 41 002,3146     O
A---E103     A103 060 V 42 002,2147     P
A---E104     A104 061 V 43 002,4150     Q
A---E105     A105 062 V 44 002,3151     R
A---E106     A106 000 V 27 002,4016
A---E107     A107 005 V 27 002,2153     NOT =
A---E108     A108 000 V 27 002,3154     UNDERSCORE
A---E109     A109 000 V 27 002,2433     PERIOD WITH FLAG (CHAR 155 CAN'T GET IN)
A---E110     A110 000 V 27 002,4016
A---E111     A111 000 V 27 002,4016
A---E112     A112 000 A 73 002,4160     )
A---E113     A113 000 0000 002,3161     QUESTION MARK
A---E114     A114 063 V 45 002,3162     S
A---E115     A115 064 V 46 002,2163     T
A---E116     A116 065 V 47 002,3164     U
A---E117     A117 066 V 48 002,2165     V
A---E118     A118 067 V 49 002,2166     W

A---E119     A119 070 V 50 002,1167     X
A---E120     A120 071 V 51 002,3170     Y
A---E121     A121 072 V 52 002,2171     Z
A---E122     A122 000 0000 000,4016
A---E123     A123 000 A091 022,1173     LEFT BRACKET
A---E124     A124 000 = 35 442,2174     *
A---E125     A125 000 0000 000,1175     TAB
A---E126     A126 000 0000 000,4016
A---E127     A127 000 0000 000,4016
A---E128     A128 000 0000 000,0037     EJECT
A---E129     A129 000 0000 000,0056     CARRIAGE RETURN
A---E130     A130 000 0000 000,0155     PSEUDO-PERIOD (CAN'T BE GENERATED)
E---E000+    E  0 020 *  0 010 $  0     OUT OF SPACE
E---E001     E  1 020 *  1 010 $  0     OVERLFOW
E---E002     E  2 020 *  2 010 $  0     UNDEFINED VALUE
E---E003     E  3 020 *  3 010 $  0     DIVISION BY ZERO
E---E003     E  4 020 *  4 010 $  0     ILLEGAL INDEX
E---E003     E  5 020 *  5 010 $  0     NUMERAL MORE THAN NINE DIGITS
E---E003     E  6 020 *  6 010 $  0     MALFORMED
E---E003     E  7 020 *  7 010 $  0     ILLEGAL LIMIT
E---E003     E  8 020 *  8 010 $  0     OPEN TASK + DO
E---E003     E  9 020 *  9 010 $  0     ILLEGAL INDIRECT
E---E003     E 10 020 * 10 010 $  0     ILLEGAL DIRECT
E---E003     E 11 020 * 11 010 $  0     ILLEGAL DECK NUMBER
E---E003     E 12 020 * 12 010 $  0     ILLEGAL FORM NUMBER
E---E003     E 13 020 * 13 010 $  0     ILLEGAL STEP NUMBER
E---E003     E 14 020 * 14 010 $  0     ILLEGAL ARG FOR SQRT
E---E003     E 15 020 * 15 010 $  0     CONDITIONAL DIRECT
E---E003     E 16 020 * 16 010 $  0     NO SUCH STEP
E---E003     E 17 020 * 17 010 $  0     NO SUCH PART
E---E003     E 18 020 * 18 010 $  0     ILLEGAL PART NUMBER
E---E003     E 19 020 * 19 010 $  0     NO SUCH FORM
E---E003     E 20 020 * 20 010 $  0     ILLEGAL ARG FOR LOG
E---E003     E 21 020 * 21 010 $  0     NEGATIVE * NON INTEGER
E---E003     E 22 020 * 22 010 $  0     ILLEGAL ARG FOR SIN OR COS
E---E023     E 23 020 * 23 010 $  0     ZERO * NEGATIVE
E---E100          050 * 45 010 $  1
E---E110          020 S  0 050 P 12
E---E120          020 Q  9 002 * 41
E---E130          020 $  0 010 = 64
E---E140              * 40     * 40
E---E150          010 * 44
E---E160     * 40 052,4511,222,3051     'ERROR IN LINE ABOVE  '
E---E170          007,0311,120,7043
E---E180          014,4450,520,7021
E---E190          011,0461,521,2520
E---E200          007,0164,000,0000
E---E210     * 41 020 $  0 010 = 64
E---E220              * 42     * 42
E---E230          010 * 43
E---E240     * 42 052,4511,222,3051     'ERROR IN STEP'
E---E250          007,0311,120,7062
E---E260          031,4251,160,7200
E---E270     * 43 020 P 16 056 P  3
E---E280          020 $  0 010 = 63     COPY STEP NUMBER FROM R TO S.
E---E290          020 A 80 050 P 11
E---E300          020 $  0 010 = 66     ADD COLON
E---E310          020 $  0 010 = 62     SPACE
E---E320          020 $  0 010 = 62     SPACE
E---E330     * 44 020 $  0 010 = 64

E---E340     * 45     ----     ----
E---E350          020 $  0 010 = 25     SEND ERROR MSG
E---E360     * 46 020 Q  2 001 * 47     CLEAN UP OPERAND STACK
E---E370          020 $  0 010 = 13
E---E380          010 * 46
E---E390     * 47 020 Q  4 001 * 48     CLEAN UP OPERATOR STACK
E---E400          020 $  0 010 = 15
E---E410          010 * 47
E---E420     * 48 020 Q  6 001 * 49     CLEAN UP AUXILIARY STACK
E---E430          020 $  0 010 = 17
E---E440          010 * 48
E---E450     * 49 020 $  0 010 = 55     SWITCH
E---E460          020 $  0 010 = 53     KICK OUT
E---E470          010 X  1
E---E500     * 50 054,4451,443,2026     'INSUFFICIENT STORAGE SPACE.'
E---E501          013,0310,461,4425
E---E502          022,4630,343,1063
E---E503          023,0510,421,3425
E---E504          007,0621,161,0423
E---E505          012,4331,250,0000
E---E510     * 51 063,0650,522,4426     'OVERFLOW.'
E---E511          021,4461,541,5452
E---E512          100,0000,000,0000
E---E520     * 52 072,0450,501,2425     'UNDEFINED VALUE.'
E---E521          014,4450,521,2016
E---E522          032,4211,063,2025
E---E523          015,4524,000,0000
E---E530     * 53 050,4631,461,2444     'ATTEMPTING DIVISION BY ZERO.'
E---E531          023,4630,622,2427
E---E532          007,0240,623,2431
E---E533          031,0311,142,2416
E---E534          011,0700,343,4425
E---E535          024,4460,662,6200
E---E540     * 54 054,4450,501,2467     'INDEX VALUE MUST BE INTEGER AND
E---E541          007,0650,422,1464       0-INDEX-99.'
E---E542          012,4161,103,2062
E---E542          031,4160,441,2416
E---E542          014,4451,461,2427
E---E542          012,4510,341,0445
E---E542          012,0161,404,2431
E---E542          022,4240,523,3505
E---E542          044,4110,662,5200
E---E550     * 55 062,4641,101,2451     'NUMERIALS MUST BE LESS THAN TEN
E---E551          010,4431,440,7044       DIGITS LONG.'
E---E552          032,0621,460,7022
E---E553          012,4161,061,2462
E---E554          031,0161,461,4021
E---E555          022,4161,461,2445
E---E556          007,0240,621,3431
E---E557          031,4620,342,1446
E---E558          022,4270,662,5200
E---E560     * 56 062,0211,061,3046     'MALFORMED.'
E---E561          024,4440,521,2033
E---E562          025,2000,000,0000
E---E570     * 57 061,4311,101,4463     'LIMIT MUST BE INTEGER AND
E---E571          007,0441,503,1063       /LIMIT/-10*9.'
E---E572          007,0220,520,7031
E---E573          022,4620,521,3425
E---E574          024,4160,422,2424
E---E575          007,1401,061,4444

E---E575          014,4633,004,3401
E---E576          030,1740,221,5452
E---E577          100,0000,000,0000
E---E580     * 58 063,4430,521,0462     'PLEASE 'CANCEL' OR 'GO' BEFORE
E---E581          012,4162,041,1421       ANOTHER 'DO'.
E---E582          022,4230,522,1502
E---E583          007,0461,522,7102
E---E584          013,4462,040,7022
E---E585          012,4261,142,4425
E---E586          007,0211,122,3063
E---E587          031,4300,522,4416
E---E588          041,0241,144,1033
E---E589          025,2000,000,0000
E---E590     * 59 071,4300,623,1016     'THIS COMMAND MUST NOT BE
E---E591          011,4461,102,2021       GIVEN INDIRECTLY.'
E---E592          022,4240,342,2064
E---E593          031,0630,342,2446
E---E594          031,4160,441,2416
E---E595          013,4311,521,2445
E---E596          007,0311,121,2031
E---E597          024,4250,463,1443
E---E598          034,0331,250,0000
E---E600     * 60 071,4300,623,1016     'THIS COMMAND MUST NOT BE
E---E601          011,4461,102,2021       GIVEN INDIRECTLY.'
E---E602          022,4240,342,2064
E---E603          031,0630,342,2446
E---E604          031,4160,441,2416
E---E605          013,4311,521,2445
E---E606          007,0240,622,4033
E---E607          011,4631,063,4033
E---E608          025,2000,000,0000
E---E610     * 61 052,0250,462,1016     'DECK NUMBER MUST BE INTEGER AND
E---E611          022,4641,101,1025       0-DECK-10*9.'
E---E612          024,4161,103,2062
E---E613          031,4160,441,2416
E---E614          014,4451,461,2427
E---E615          012,4510,341,0445
E---E616          012,0161,404,3424
E---E617          012,4231,044,3401
E---E618          030,1740,221,5452
E---E619          100,0000,000,0000
E---E620     * 62 053,0461,222,2016     'FORM NUMBER MUST BE INTEGER AND
E---E621          022,4641,101,1025       0-FORM-10*9.'
E---E622          024,4161,103,2062
E---E623          031,4160,441,2416
E---E624          014,4451,461,2427
E---E625          012,4510,341,0445
E---E626          012,0161,404,3426
E---E627          023,0511,104,3401
E---E628          030,1740,221,5452
E---E629          100,0000,000,0000
E---E630     * 63 071,0630,522,3416     'STEP NUMBER MUST SATISFY 1-STEP-10*9.'
E---E631          022,4641,101,1025
E---E632          024,4161,103,2062
E---E633          031,4161,103,2062
E---E634          014,4620,543,4016
E---E635          000,5051,443,1425
E---E636          024,5070,023,0174
E---E637          004,4331,250,0000
E---E640     * 64 050,4631,461,2444     'ATTEMPTING SQRT OF A NEGATIVE NUMBER.'

E---E641          023,4630,622,2427
E---E642          007,0621,202,4463
E---E643          007,0460,540,7021
E---E644          007,0450,521,3421
E---E645          031,4311,521,2416
E---E646          022,4641,101,1025
E---E647          024,4331,250,0000
E---E650     * 65 052,0311,221,2423     'DIRECT COMMANDS MUST BE UNCONDITIONAL.'
E---E651          031,4160,462,3044
E---E652          022,0211,121,2062
E---E653          007,0441,503,1063
E---E654          007,0220,520,7064
E---E655          022,4231,142,2424
E---E656          014,4630,622,3045
E---E657          010,4430,662,5200
E---E660     * 66 071,4300,520,7062     'THE STEP CALLED FOR DOESN'T EXIST.'
E---E661          031,4251,160,7023
E---E662          010,4431,061,2424
E---E663          006,0261,142,4416
E---E664          012,0460,523,1045
E---E665          040,4630,341,2467
E---E666          014,4621,461,5452
E---E667          100,0000,000,0000
E---E670     * 67 071,4300,520,7047     'THE PART CALLED FOR DOESN'T EXIST.'
E---E671          010,4251,460,7023
E---E672          010,4431,061,2424
E---E673          006,0261,142,4416
E---E674          012,0460,523,1045
E---E675          040,4630,341,2467
E---E676          014,4621,461,5452
E---E677          100,0000,000,0000
E---E680     * 68 063,4211,223,1416     'PART NUMBER MUST BE INTEGER AND
E---E681          022,4641,101,1024       0-PART-10*9.'
E---E682          024,4161,103,2062
E---E683          031,4160,441,2416
E---E684          014,4451,461,2427
E---E685          012,4510,341,0445
E---E686          012,0161,404,3447
E---E687          010,4511,464,3401
E---E688          030,1740,221,5452
E---E689          100,0000,000,0000
E---E690     * 69 071,4300,520,7026     'THE FORM CALLED FOR DOESN'T EXIST.'
E---E691          023,0511,100,7023
E---E692          010,4431,061,2424
E---E693          007,0261,142,4416
E---E694          012,0460,523,1045
E---E695          040,4630,341,2467
E---E696          014,4621,461,5452
E---E697          100,0000,000,0000
E---E700     * 70 050,4631,461,2444     'ATTEMPTING LOG OF A NONPOSITIVE
E---E701          023,4630,622,2427       NUMBER.'
E---E702          007,0431,141,3416
E---E703          023,0260,341,0416
E---E704          022,4461,122,3446
E---E705          031,0311,461,4465
E---E706          012,4161,123,2044
E---E707          011,0251,221,5452
E---E708          100,0000,000,0000
E---E710     * 71 050,4631,461,2444     'ATTEMPTING NEGATIVE BASE TO
E---E711          023,4630,622,2427       NONINTEGER POWER.'

E---E712          007,0450,521,3421
E---E713          031,4311,521,2416
E---E714          011,0211,441,2416
E---E715          031,4460,342,2446
E---E716          022,4311,123,1425
E---E717          013,4251,220,7047
E---E718          023,0660,522,4433
E---E719          025,2000,000,0000
E---E720     * 72 050,4631,461,2444     'ATTEMPTING SIN OR COS
E---E721          023,4630,622,2427       OF MAGNITUDE -100.'
E---E721          007,0620,622,2416
E---E721          023,0510,341,1446
E---E721          031,0161,141,3016
E---E721          022,0210,562,2431
E---E721          031,4640,501,2416
E---E721          043,0011,403,0033
E---E721          025,2000,000,0000
E---E730     * 73 050,4631,461,2444     'ATTEMPTING ZERO TO A NEGATIVE POWER.'
E---E731          023,4630,622,2427
E---E732          007,0710,522,4446
E---E733          007,0631,140,7021
E---E734          007,0450,521,3421
E---E735          031,4311,521,2416
E---E736          023,4461,541,2451
E---E737          015,4524,000,0000
E---E900     *  0     * 50     * 50
E---E901     *  1     * 51     * 51
E---E902     *  2     * 52     * 52
E---E903     *  3     * 53     * 53
E---E904     *  4     * 54     * 54
E---E905     *  5     * 55     * 55
E---E906     *  6     * 56     * 56
E---E907     *  7     * 57     * 57
E---E908     *  8     * 58     * 58
E---E909     *  9     * 59     * 59
E---E910     * 10     * 50     * 50
E---E911     * 11     * 61     * 61
E---E912     * 12     * 62     * 62
E---E913     * 13     * 63     * 63
E---E914     * 14     * 64     * 64
E---E915     * 15     * 65     * 65
E---E916     * 16     * 66     * 66
E---E917     * 17     * 67     * 67
E---E918     * 18     * 68     * 68
E---E919     * 19     * 69     * 69
E---E920     * 20     * 60     * 60
E---E921     * 21     * 71     * 71
E---E922     * 22     * 72     * 72
E---E923     * 23     * 73     * 73
E---E999          100 0000 000 0000,
F000E000+    F  0 010 $  0              Y = SQRT(X)
F000E010          024 K  2 052 *  9     SET EXIT
F000E020          023 Q  3 002 *  9     TRANSFER IF X=0
F000E030          020 $  0 010 = 11     UNPACK X INTO P4, P5, P6
F000E040          023 P  5 001 E 14     TRANSFER IF X NEGATIVE
F000E050          020 P  4 071    8     COMPUTE 1/2 SFX
F000E060          050 T  1 060 T  2     STORE IN P4
F000E070          071   32 072    1
F000E080          050 P  4 020 T  1     TEST FOR ODD OR EVEN
F000E090          004 P  6 002 *  1     IF ODD 10.P6 TO T0

F000E100          032 N  1 060 T  0     AND 10E9 TP P6 AS Y(0)
F000E110          020 N  9 010 *  2
F000E120     *  1 060 T  0 020 * 90     SFX EVEN, X TO T0
F000E130     *  2 050 P  6 004 T  0     AND SQRT(10) + EPSILON TO P6
F000E140          032 N  8 044 P  6     T1=Y(N)-(10E8.X/Y(N))=DELTA
F000E150          020 P  6 065 T  1
F000E160          020 P  6 073    1     P6=Y(N+1)=(2Y-DELTA)/2
F000E170          025 T  1 072    1
F000E180          050 P  6 020 T  1     IF DELTA GREATE THAN OR EQUAL TO
F000E190          025 N  4 006 *  2     10E4, ITERATE
F000E200          020 P  6 004 T  0
F000E210          037 N  8 044 P  6     IF (Y(N+1)) + (Y(N+1)-A.10E8)/Y(N+1))
F000E220          020 P  6 065 T  2     IS LESS THAN ZERO, ADD ONE TO
F000E230          002 *  3 020 P  6     Y(N+1)
F000E240          024 K  1 050 P  6
F000E250     *  3 020 $  0 010 = 30     PACK RESULT
F000E260     *  9 010 ----              EXIT
F000E270     * 90+   316227800   39,    SQRT(10) + EPSILON
F001E000+    F  1 010 $  0              Y=LOG(X)---BASE E
F001E010          024 K  2 052 *  9     SET EXIT
F001E020          023 Q  3 002 E 20     X=0 IS AN ERROR
F001E030          020 $  0 010 = 11     UNPACK
F001E040          023 P  5 001 E 20     X NEGATIVE IS AN ERROR
F001E050          020 P  4 072   31     SFX AS AN INTEGER
F001E060          050 P  4 020 * 96     INITIALIZE ADDRESS
F001E070          052 *  6 120
F001E080     *  1 050 T  1 020 P  6     SET Q=0
F001E090          025 * 91 002 *  2     IF COEF(X) LESS THAN LOWER BOUND,
F001E100          020 P  6 073    1     2 COEF(X) REPLACES IT AND
F001E110          050 P  6 020 T  1     Q+1 REPLACE Q
F001E120          024 I  1 010 *  1     COMPUTE Z FOR SERIES AS EQUAL TO
F001E130     *  2 020 P  6 024 * 92     (COEF(X)-(10*8)(2*3) /
F001E140          050 T  2 020 P  6     (COEF(X)+(10*8)(2*3)
F001E150          025 * 92 040 T  2
F001E160          060 T  2 030 T  2     Z IN T2, Z*2 IN T3
F001E170          050 T  3 120          COMPUTE 1/2.LOG(X)=Z+1/3(Z*3)+
F001E180          050 T  0 020 * 95     1/5(2*5)+...+1/13(Z*13)
F001E190     *  3 050 T  4 020 I  1     T4=DELTA=13
F001E200          040 T  4 020 T  0     T0=LOG(X)=0, INITIALLY
F001E210          064 T  0 004 T  0     T0=LOG(X)+(1/DELTA)
F001E220          030 T  3 050 T  0     T0=(LOG(X)+(1/DELTA)).Z*2
F001E230          020 T  4 025 I  4     TRANSFER IF DELTA WAS 3
F001E240          005 *  4 024 I  2     DELTA=DELTA-2
F001E250     *  4 010 *  3 004 T  0     (Z.LOG(X))+Z
F001E260          030 T  2 024 T  2     T0=LOG(X)/4
F001E270          072    1 050 T  0
F001E280          020 I  3 025 T  1
F001E290          050 T  1 004 * 93
F001E300          032 T  1 060 T  5     T5=(3-Q).LOG(2)/4
F001E310          024 T  0 004 * 94     LOG(X)=4.(EXP(X).LOG(10)+T5)
F001E320          036 P  4 077    2     INTEGER IN ACCUMULATOR AND T0, T5
F001E330          050 T  0 050 T  5     FRACTION IN MQ AND T1
F001E340          001 * 12 060 T  1     TRANSFER IF LOG IS NEGATIVE
F001E350     *  5 023 T  0 006 * 14     ...... NORMALIZE ......
F001E360     * 18 020 I  1 050 T  3     IF T0 IS GREATER THAN 10*I, THEN
F001E370     *  6 021 N  1 024 T  0     SET I=I + 1, ITERATE
F001E380          005 *  7 020 *  6
F001E390          024 K  2 052 *  6
F001E400          020 T  3 024 I  1
F001E410     *  7 014 * 18 020 T  3     IF T0 IS LESS THAN 10*I, THEN

F001E420          025 I  1 050 P  4     P4=EXP(Y)=I-1 AND THE MAGNITUDE
F001E430          020 * 97 025 T  3     /FY=(T0+(2*(-39)).T1).10*(9-I)
F001E440          056 *  8 056 * 10
F001E450     *  8 004 T  1 030 ----
F001E460     * 10 004 T  0 036 ----     P6=Y, SHIFT EXP(Y)
F001E470          060 P  6 020 P  4     P4=SFY
F001E480     * 11 073   31 050 P  4     SET SIGN OF LOG
F001E490          020 T  5 124 K  4
F001E500          070    9 050 P  5     PACK RESULT
F001E510          020 $  0 010 = 30     EXIT
F001E520     *  9 010 ----
F001E530     * 12 061 T  1 006 * 13     GET ABSOLUTE VALUE OF NEGATIVE LOG
F001E540          125 K  4 050 T  1
F001E550          022 T  0 025 I  1
F001E560     * 20 050 T  0 010 *  5
F001E570     * 13 050 T  1 022 T  0     LOG IS LESS THAN ONE, TEST FOR
F001E580     * 14 010 * 20 023 T  1     LOG=ZERO
F001E590          002 * 19 004 T  1
F001E600     * 15 020 I  1 050 T  3
F001E610          032 N  1 025 I  1
F001E620          002 * 16 020 T  3
F001E630          024 I  1 014 * 15
F001E640     * 16 020 T  3 025 I  2
F001E650          024 * 96 056 * 17
F001E660     * 17 004 T  1 032 ----
F001E670          032 N  9 050 P  6
F001E680          021 T  3 010 * 11
F001E690     * 19 050 Q  3 010 *  9
F001E700     * 90+   316227800   39     SQRT(10)+EPSILON
F001E710     * 91+   565685425   39     (2E3)(10E8)(SQRT(2)/2)
F001E720     * 92+   800000000   39     (2E3)(10E8)
F001E730     * 93+.17328679514   00     LOG(2)/4
F001E740     * 94+.57564627325   00     LOG(10)/4
F001E750     * 95+          13   39
F001E760     * 96     N  1     N  1
F001E770     * 97     N  9     N  9,
F002E000+    F  2 010 $  0              Y = E*X
F002E010          024 K  2 052 *  9     SET EXIT
F002E020          023 Q  3 001 *  1     IF X=0, SET Y=1 AND EXIT
F002E030     *  3 020 N  8 050 Q  3
F002E040          010 *  9
F002E050     *  1 020 $  0 010 = 11     UNPACK NON-ZERO X
F002E060          020 P  6 040 N  9     NEW COEF(X) IS COEF(X) / 10*9
F002E070          060 T  0 020 P  4     SFX SHIFTED TO 2*-39 POSITION
F002E080          072   31 050 T  1     STORE IN T1
F002E090          002 *  2 024 I  9     IF, SFX IS LESS THAN -9, SET Y=1
F002E100          001 *  3 022 T  1
F002E105          025 I  1 010 $  1     ADJUST SFX BY ONE
F002E110          024 * 91 056 *  4
F002E120          120      050 P  4     SFX FOR RESULT
F002E130     *  4 004 T  0 044 ----
F002E140          060 T  0 070    2     COEF(X) /4 FOR SERIES
F002E150          050 T  0 014 *  5     IF SFX IS 3 OR MORE, CHECK SIGN
F002E160     *  2 025 I  3 001 *  6     OF COEF(X)
F002E170     *  8 023 P  5 002 E  1     OVERFLOW FOR POSITIVE NO.
F002E180          120      014 *  3     SET Y=0 FOR NEGATIVE NO.
F002E190     *  6 024 I  1 005 *  7     IF SFX=2, COEF(X) MUST BE LESS
F002E200          020 P  6 025 * 92     THAN LOG(10) TIMES (10*8) + 1
F002E210     *  7 002 *  8 020 T  1     IF GREATED, TEST SIGN OF COEF
F002E220          024 I  1 024 * 91

F002E230          056 * 10 004 T  0     (COEF(X)) (LOG(E))  (LESS THAN ONE)
F002E240          030 * 93 050 T  0     IN T0
F002E250     * 10 004 T  0 032 ----     T0 TIMES 10*(SFX PLUS 1)
F002E260          050 P  4 060 T  0     INTEGER PART TO SFX FOR RESULT
F002E270          072    2 044 * 93     FRACTIONAL PART /4 TO XBAR
F002E280     *  5 060 T  0 023 P  5
F002E290          006 * 11 021 T  0     XBAR FOR SERIES IN T0, USE 12 TERMS
F002E300          050 T  0 021 P  4
F002E310     * 11 050 P  4 020 * 95     SET DIVISOR FOR SERIES
F002E320          050 T  2 020 * 94     SET LOG = 1/2
F002E330     * 12 050 T  1 020 T  0
F002E340          076   39 044 T  2     COMPUTE 1/2 (E*XBAR) = 2
F002E350          030 T  1 024 * 94
F002E360          050 T  1 020 T  2
F002E370          025 I  1 050 T  2
F002E380          025 I  1 006 * 12     (Z*4) (10*10) (16) = E*X
F002E390          004 T  1 030 T  1
F002E400          050 T  1 004 T  1
F002E410          030 T  1 010 * 18
F002E420     * 18 050 T  1 004 T  1
F002E430          032 N 10 077    4
F002E440          050 P  6 020 P  4     ADJUST SFX BY 2
F002E450          025 I  2 050 P  4
F002E460          004 I  3 020 P  6     NORMALIZE E*X
F002E470          025 N 11 002 * 13     RESULT LESS THAN (1.6)(10*11)
F002E480          004 I  2 020 P  6     AND GREATER THAN OR EQUAL TO 10*8
F002E490          025 N 10 002 * 13
F002E500          004 I  1 020 P  6
F002E510          025 N  9 005 * 14
F002E520     * 13 020 * 91 064 T  1
F002E530          056 * 15 020 P  4     ADJUST SFX
F002E540          064 P  4 004 P  6
F002E550     * 15 120      044 ----     SCALE E*X
F002E560     * 14 060 P  6 120          CLEAR SIGN OF E*X
F002E570          050 P  5 020 P  4
F002E580          073   31 050 P  4
F002E620     * 17 020 $  0 010 = 30     PACK RESULT
F002E630     *  9 010 ----              EXIT
F002E640     * 91              N  0
F002E650     * 92+   230258510   39     LOG(10), BASE E, TIMES 10*8 PLUS 1
F002E660     * 93+.43429448190   00     LOG(E), BASE 10
F002E670     * 94+.50000000000   00     1/2
F002E680     * 95+          12   39,
F003E000+         000 K  0 010 $  0     SIN(X)--SET FLAG IN MQ=-1
F003E010          024 K  2 052 *  9     SET EXIT
F003E020          060 T  0 002 $  1     STORE FALG IN T0
F003E050          020 $  0 010 = 11     UNPACK
F003E055          020 T  0 002 *  1     FOR COSINE SET P5 EQUAL TO ZERO
F003E060          020 P  5 071    9     SHIFT SIGN OF X TO SIGN BIT
F003E070     *  1 050 P  5 020 P  4     SHIFT SFX TO 2*(-39) POSITION
F003E080          072   31 050 P  4     TRANSFER IF SFX IS NEGATIVE
F003E090          005 *  2 025 I  2     NO. OUT OF RANGE IF SFX IS 2 OR MORE
F003E100          002 E 22 024 I  4     LOCATION (10*(SFX+2))
F003E110          024 J 11 056 $  1
F003E120          004 P  6 032 ----     X=X.(10*(SFX+10))
F003E130          044 * 91 050 T  1     COMPUTE X/2PI
F003E140          025 * 92 001 *  3     X=REMAINDER IF X LESS THAN PI.
F003E150          050 T  1 020 P  5     OTHERWISE X=X-PI
F003E160          024 K  4 050 P  5     CHANGE SIGN
F003E170     *  3 020 T  1 040 * 92     X/PI IN MQ

F003E180     *  2 014 *  4 024 * 93     IF SFX LESS THAN -11, SET X=0
F003E190          006 *  5 004 K  0
F003E200     *  5 014 *  4 024 J 11     LOCATION (10*(SFX+11))
F003E210          056 * 15 020 P  6
F003E220     * 15 040 N  9 032 ----     X=((X/10*9).10*(11+SFX))/PI.10*10
F003E230     *  4 044 * 92 020 * 94     X=1/2-X FOR COS
F003E240          065 T  1 020 T  0     TRANSFER TO SINE OR COS
F003E250          002 *  6 020 * 94     FOR SINE X=1/2-ABSOLUTE VALUE
F003E260          027 T  1 050 T  1     OF T1 (1/2-X)
F003E270     *  6 004 T  1 033 T  1     -X*2
F003E280          077    2 050 T  2     -4(X*2)
F003E290          020 * 98 052 *  7     INITIALIZE SERIES FOR 1/4 SINE
F003E300     *  8 004 * 95 031 T  2
F003E310     *  7 024 ---- 050 P  6
F003E320          004 P  6 020 *  7
F003E330          024 K  2 052 *  7
F003E340          025 * 97 005 *  8
F003E350          032 T  1 050 P  6
F003E360          124 K  4 024 P  5
F003E370          070    9 050 P  5
F003E380          007 $  0 022 P  6
F003E390          073    2 003 * 10     TEST FOR OVERFLOW (RESULT=1)
F003E400          071   40 030 N  9
F003E410          050 P  6 025 N  9
F003E420          002 * 10 023 P  6     TEST FOR RESULT=0
F003E430          002 *  9 021 I  9
F003E440          050 P  4 010 $  1
F003E450     * 13 020 * 99 050 * 11     PRESET INSTRUCTION FOR NORMALIZATION
F003E460     * 11 020 P  6 025 N  8
F003E470          002 * 12 020 * 11
F003E480          025 K  1 014 * 13     NORMALIZE RESULT AND
F003E490     * 12 020 * 99 025 * 11
F003E500          050 T  1 024 J 11     ADJUST SCALE FACTOR
F003E510          056 * 14 021 T  1
F003E520          024 I  8 024 P  4
F003E530          073   31 050 P  4
F003E540     * 14 004 P  6 032 ----
F003E550          060 P  6 010 $  1
F003E560          020 $  0 010 = 30     PACK RESULT
F003E570     *  9 010 ----              EXIT
F003E580     * 10 020 P  5 024 N  8     RESULT IS ONE
F003E590          050 Q  3 010 *  9     COMBINE WITH SIGN AN EXIT
F003E620     * 91+ 62831853072   39     2 PI . 10*10
F003E631     * 92+ 31415926536   39     PI.10*10
F003E640     * 93+          11   39     ELEVEN
F003E650     * 94 040 0000 000 0000     1/2
F003E660     * 95 000 0000 003 5173     COEFFICIENTS A13,A11,...,A1
F003E670     * 96 177 7777 416 5664     TAKEN FROM ILLIAC SINE ROUTINE T5
F003E680          000 0025 016 6553
F003E690          177 6632 264 6777
F003E600          002 4315 361 4634
F003E610          153 2504 143 1673
F003E720          062 2077 325 0420     A1
F003E730     * 97 024 * 97 050 P  6     TEST WORD FOR END OF SERIES
F003E740     * 98     * 96     * 96
F003E750     * 99 020 P  6 025 N  8,    INITIALIZER FOR *11
F004E000     F  4 004 K  0 014 F  3,    COS(X)--SET FLAG IN MQ=0
F005E000+    F  5 010 $  0              IP(X)
F005E010          024 K  2 052 *  9
F005E020          020 $  0 010 = 11     UNPACK (Q3)

F005E030          023 Q  3 002 *  9     ZERO RESULT FOR ZERO ARGUMENT
F005E040          020 P  4 006 *  1
F005E050          120    0 050 Q  3     ZERO RESULT IF NEGAIVE SFX
F005E060     *  1 010 *  9 072   31
F005E070          050 T  0 025 I  8
F005E080          002 *  9 020 I  8     RESULT = ARGUMENT IF SFX BIG AS 8.
F005E090          025 T  0 024 J 11
F005E095          056 *  2 010 $  1
F005E100          056 *  3 120    0
F005E110     *  2 004 P  6 044 ----     CHOP FRACTIONAL PART
F005E120     *  3 000    0 032 ----
F005E130          060 P  6 010 $  1
F005E140          020 $  0 010 = 30     PACK RESULT INTO Q3
F005E150     *  9 010 ----         ,
F006E000+    F  6 010 $  0              FP(X)
F006E010          024 K  2 052 *  9
F006E020          020 $  0 010 = 12     PUSH OPERANDS
F006E030          020 $  0 010 F  5     IP(X)
F006E040          020 $  0 010 = 32     X←IP(X)=FP(X)
F006E050     *  9 010 ----         ,
F007E000+    F  7 010 $  0              SFX(X)
F007E010          024 K  2 052 *  9
F007E020          020 $  0 010 = 11     UNPACK (Q3)
F007E040          020 P  4 001 *  1
F007E050          120    0 014 *  2
F007E060     *  1 021 P  4 050 P  4
F007E070     *  2 020 K 12 050 P  5
F007E080          020 P  4 072   31
F007E090          050 P  6 025 N  1
F007E100          002 *  3 120    0
F007E110          004 N  8 010 *  4
F007E120     *  3 020 K 14 004 N  7
F007E130     *  4 050 P  4 032 P  6
F007E140          060 P  6 010 $  1
F007E150          020 $  0 010 = 30     PACK RESULT INTO Q3
F007E160     *  9 010 ----         ,
F008E000+    F  8 024 K  2 010 $  0     CF(X)
F008E010          052 *  9 020 Q  3
F008E020          125 K 11 050 Q  3
F008E030     *  9 010 ----         ,
F009E000+    F  9 010 $  0              SGN(X)
F009E010          024 K  2 052 *  9
F009E020          023 Q  3 002 *  9
F009E030          020 Q  3 124 K 12
F009E040          024 N  8 050 Q  3
F009E050     *  9 010 ----         ,
F011E000+    F 11 004 * 91 010 $  0     MAX
F012E000     F 12 004 * 92 010 $  0     MIN
F012E010          024 K  2 052 *  9
F012E020          060 *  2 010 $  1
F012E030          020 Q  6 001 E  6     MALFORMED IF NOT MULTIPLE ARGUMENT
F012E040     *  1 020 Q  3 050 H 21
F012E050          020 Q  7 050 H 22
F012E060          020 $  0 010 = 17
F012E070          020 $  0 010 = 70     COMPARE
F012E080     *  2 --- ---- --- ----
F012E090     *  3 020 H 22 050 Q  3
F012E100     *  4 020 Q  7 002 *  1
F012E110     *  9 010 ----
F012E120     * 91 071    4 001 *  4     FOR MAX

F012E130     * 92 071    6 001 *  4,    FOR MIN
G000E000+    G  0 010 $  0              SET (TEMPORARY) (NO ARRAYS YET)
G000E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G000E020          052 *  2 124 K 34
G000E030          025 K 34 001 E  6     ERROR IF NOT LETTER
G000E040          020 $  0 010 =  2     ADVANCE TO NONSPACE
G000E050          124 A 43 025 A 43
G000E060          002 *  1 010 E  6     ERROR IF NOT '='
G000E070     *  1 020 $  0 010 =  2     ADVANCE TO NONSPACE
G000E080          020 $  0 010 = 21     EVALUATE EXPRESSION
G000E090          020 P  1 124 K 19
G000E100          025 K 19 001 E  6     ERROR IF NOT AT TERMINAL
G000E110          020 Q  3 010 $  1
G000E120     *  2 050 ---- 010 $  1     SET VALUE
G000E130          020 $  0 010 = 13     POP Q3
G000E140          010 X  5         ,
G001E000+    G  1 010 $  0              DO (TEMPORARY)
G001E005          020 Q  9 002 *  3
G001E006          020 Q 13 002 E 10     ERROR IF GIVEN DIRECTLY AND TASK OPEN
G001E010     *  3 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G001E020          020 $  0 010 = 27     ACCUMULATE WORD
G001E030          025 W  7 050 T  0
G001E040          023 T  0 001 E  6     MALFORMED IF NOT 'PART'
G001E050          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G001E060          020 $  0 010 = 21     EVALUATE PART NUMBER
G001E070          020 $  0 010 = 44     VALIDATE PART NUMBER
G001E080          020 P  1 124 K 19     VERIFY TERMINAL
G001E090          025 K 19 001 E  6
G001E100          020 Q  3 050 P 20     SET CONTEXT
G001E110          020 $  0 010 = 13     POP Q3
G001E120          020 $  0 010 = 50     FIND PART
G001E130          001 E 17 052 *  1     ERROR IF CAN'T
G001E140          024 K  2 052 *  2
G001E150     *  1 020 ---- 050 P 16     SET P16 FOR FIRST STEP
G001E160          020 $  0 010 = 18     DESCEND
G001E170     *  2 020 ---- 050 Q  9     SET Q9 TO FIRST STEP
G001E180          010 X  6         ,    JUMP TO FETCH
G002E000+    G  2 010 $  0              TO
G002E010          020 Q  9 001 E 10     ERROR IF DIRECT
G002E020          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E030          020 $  0 010 = 27     PICK UP WORD
G002E040          025 W  9 050 T  0
G002E050          023 T  0 001 *  1     JUMP IF NOT 'STEP'
G002E060          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E070          020 $  0 010 = 21     EVALUATE EXPRESSION
G002E080          020 $  0 010 = 45     VALIDATE
G002E085          020 P  1 124 K 19     VERIFY TERMINAL
G002E086          025 K 19 001 E  6
G002E090          020 Q  3 050 P 21     SET CONTEXT
G002E100          020 $  0 010 = 13     POP Q3
G002E110          020 $  0 010 = 51     FIND STEP
G002E120          001 E 16 050 P 16     ERROR IF CAN'T ELSE SET P16
G002E125          020 P 21 050 Q  9     SET Q9
G002E130          010 X  6              JUMP TO FETCH
G002E140     *  1 020 H 19 025 W  7
G002E150          050 T  0 023 T  0
G002E160          002 *  2 010 E  6     ERROR IF NOT 'PART'
G002E170     *  2 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E180          020 $  0 010 = 21     EVALUATE EXPRESSION
G002E190          020 $  0 010 = 44     VALIDATE

G002E195          020 P  1 124 K 19     VERIFY TERMINAL
G002E196          025 K 19 001 E  6
G002E200          020 Q  3 050 P 20     SET CONTEXT
G002E210          020 $  0 010 = 13     POP Q3
G002E220          020 $  0 010 = 50     FIND PART
G002E230          001 E 17 052 *  3     ERROR IF CAN'T
G002E235          024 K  2 052 *  4
G002E240     *  3 030 ---- 050 P 16     ELSE SET P16 FOR FIRST STEP
G002E245     *  4 020 ---- 050 Q  9     SET Q9
G002E250          010 X  6         ,    JUMP TO FETCH
G003E000+    G  3 010 $  0              DONE
G003E010          020 $  0 010 = 38     SIMPLE-INDIRECT TEST
G003E020          010 X  7         ,    JUMP TO ASCEND
G004E000+    G  4 010 $  0              CANCEL
G004E010          020 $  0 010 = 37     SIMPLE DIRECT TESTS
G004E020          020 Q 12 050 Q  8
G004E030          020 Q 13 050 Q  9
G004E040          020 K  4 050 Q 12
G004E050          050 Q 13 010 $  1
G004E060          020 K  4 050 P 17     RESET STOP FLAG
G004E070          020 Q  8 001 *  5
G004E080     *  1 052 *  2 052 *  3
G004E090     *  2 020 ---- 001 *  4
G004E100          050 T  0 004 T  0
G004E110          020 $  0 010 = 29
G004E120     *  3 020 ---- 010 *  1
G004E130     *  4 004 Q  8 010 $  1
G004E140          020 $  0 010 = 28
G004E150          020 $  0 010 = 19
G004E160          020 Q  8 002 *  1
G004E170     *  5 020 $  0 010 = 55     SWITCH TO USER
G004E180          020 $  0 010 = 53     KICK OUT PROGRAM
G004E190          010 X  1         ,
G005E000+    G  5 010 $  0              ERASE TEMPORARY
G005E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G005E020          124 K 34 025 K 34
G005E030          001 E  6 010 $  1
G005E040          020 P  1 052 *  1
G005E050          020 $  0 010 =  2     ADVANCE TO NONSPACE
G005E060          124 K 19 025 K 19
G005E070          001 E  6 020 K  4
G005E080     *  1 050 ---- 010 X  5,
G006E000+    G  6 010 $  0              TYPE
G006E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G006E020          020 P  2 050 * 90
G006E030          020 $  0 010 = 27     ACCUMULATE WORD
G006E040          025 W  0 050 T  0
G006E050          023 T  0 002 *  1     JUMP IF 'ALL'
G006E060          004 H 19 010 $  1
G006E070          020 W  7 065 T  0
G006E080          023 T  0 002 *  5     JUMP IF 'PART'
G006E090          020 W  9 056 T  0
G006E100          023 T  0 002 * 10     JUMP IF 'STEP)
G006E110          020 W  3 065 T  0
G006E120          023 T  0 002 * 15     JUMP IF 'FORM'
G006E130          020 W 13 056 T  0
G006E140          023 T  0 002 * 20     JUMP IF 'SIZE'
G006E150          020 P  1 124 A 66
G006E160          025 A 66 002 * 30     JUMP IF QUOTES
G006E170          010 * 50              JUMP TO EVALUTAION SECTION

G006E180     *  1 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G006E190          020 $  0 010 = 27     ACCUMULATE WORD
G006E200          004 H 19 010 $  1
G006E210          020 W  8 065 T  0
G006E220          023 T  0 002 * 35     JUMP IF 'PARTS'
G006E230          020 W 10 065 T  0
G006E240          023 T  0 002 * 35     JUMP IF 'STEPS'
G006E250          020 W  4 065 T  0
G006E260          023 T  0 002 * 40     JUMP IF 'FORMS'
G006E270          010 E  6              ELSE MALFORMED
G006E280     *  5 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G006E290          020 $  0 010 = 21     EVALUATE PART NUMBER
G006E300          020 $  0 010 = 44     VALIDATE PART NUMBER
G006E310          020 $  0 010 * 25     VERIFY TERMINAL
G006E320          020 Q  3 050 P 20
G006E330          020 $  0 010 = 13     POP Q3
G006E340          020 $  0 010 = 50     FIND PART
G006E350          002 *  8 010 E 17     ERROR IF CAN'T
G006E360     *  8 020 H 23 005 P 19
G006E370     *  6 020 P 19 052 *  7
G006E380     *  7 020 ---- 001 X  5     TO ADVANCE WHEN DONE
G006E390          050 P 19 056 P  3
G006E400          020 $  0 010 =  7     UNPACK TO R
G006E410          020 $  0 010 = 67     R TO S
G006E415          020 P 15 002 X 13     JUMP IF INTERRUPT
G006E420          020 $  0 010 = 25     TYPE
G006E430     * 10 010 *  6
G006E440          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G006E450          020 $  0 010 = 21     EVALUATE STEP NUMBER
G006E460          020 $  0 010 = 45     VALIDATE STEP NUMBER
G006E470          020 $  0 010 * 25     VERIFY TERMINAL
G006E480          020 Q  3 050 P 21
G006E490          020 $  0 010 = 13     POP Q3
G006E500          020 $  0 010 = 51     FIND STEP
G006E510     * 11 002 * 11 010 E 16     ERROR IF CAN'T
G006E520          020 H 26 056 P  3
G006E530          020 4  0 010 =  7     UNPACK TO R
G006E540          020 $  0 010 = 67     R TO S
G006E550          020 $  0 010 = 25     TYPE
G006E560          010 X  5              TO ADVANCE
G006E570     * 15 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G006E580          020 $  0 010 = 21     EVALUATE FORM NUMBER
G006E590          020 $  0 010 = 46     VALIDATE FORM NUMBER
G006E600          020 $  0 010 * 25     VERIFY TERMINAL
G006E610          020 Q  3 050 P 22
G006E620          020 $  0 010 = 13     POP Q3
G006E630          020 $  0 010 = 52     FIND FORM
G006E640          002 * 11 010 E 19     ERROR IF CAN'T
G006E650     * 25 024 K  2 052 * 29     LOCAL SUBROUTINE TO VERIFY TERMINAL
G006E660          020 P  1 124 K 19
G006E670          025 K 19 001 E  6
G006E680     * 29 010 ----
G006E700     * 20 020 $  0 010 =  3     ELIMINATE SPACES
G006E702          020 $  0 010 * 25     VERIFY TERMINAL
G006E704          120    0 050 H 20     COMPUTE SIZE
G006E706          020 * 22 056 * 21
G006E708     * 21          020 ----
G006E710          001 * 23 056 * 21
G006E712          020 H 20 024 I  1
G006E714          050 H 20 014 * 21

G006E716     * 22              Q  0
G006E718     * 23 020 S  0 050 P 12
G006E720          020 $  0 010 = 36
G006E722                 1        4
G006E724          020 A 42 050 P 11
G006E726          020 $  0 010 = 66
G006E728          020 $  0 010 = 25
G006E730          010 X  5
G006E750     * 30 020 S  0 050 P 12     SET OUTPUT FOR QUOTED MESSAGE
G006E752     * 31 020 $  0 010 =  1     ADVANCE
G006E754          001 E  6 124 A 66
G006E756          025 A 66 002 * 32     JUMP IF QUOTES
G006E758     * 33 020 $  0 010 =  4
G006E760          010 * 31
G006E762     * 32 020 P  2 050 * 90     SAVE P2
G006E764          020 $  0 010 =  2     ADVANCE TO NON-SPACE
G006E766          020 * 90 050 P  2     RESTORE P2
G006E768          020 P  1 124 K 19
G006E770          025 K 19 002 * 34     JUMP IF END
G006E772          020 A 66 050 P  1
G006E774          010 * 33
G006E776     * 34 020 A 43 050 P 11     FINISH LINE
G006E778          020 $  0 010 = 66
G006E780          020 $  0 010 = 25     TRANSMIT
G006E782          010 X  5
G006E800     * 35 020 $  0 010 =  3     ELIMINATE SPACES
G006E802          124 K 19 025 K 19
G006E804          002 $  1 010 E  6     ERROR IF NOT END
G006E806          020 Q 10 050 P 18
G006E808     * 36 020 A 42 050 S  1     TYPE PARTS
G006E810          020 $  0 010 = 25
G006E812          020 P 18 056 * 37
G006E814     * 37          020 ----
G006E816          001 X  5 050 P 18
G006E818          050 P 19 010 $  1
G006E820     * 38 020 P 19 052 * 39     TYPE STEPS WITHIN PART
G006E822     * 39 020 ---- 001 * 36
G006E824          050 P 19 056 P  3
G006E826          020 $  0 010 =  7
G006E828          020 $  0 010 = 67
G006E829          020 P 15 002 X 13     JUMP IF INTERRUPT
G006E830          020 $  0 010 = 25
G006E832          010 * 38
G006E850     * 40 023 Q 11 002 * 45     TYPE ALL FORMS
G006E852          020 Q 11 050 P 19
G006E854          020 A 42 050 $  1
G006E856          020 $  0 010 = 25     LINE FEED
G006E858     * 41 020 P 19 052 * 52
G006E860          024 K  2 052 * 43
G006E862     * 42 020 ---- 001 * 45
G006E864          050 P 19 056 P  3
G006E866          020 S  0 050 P 12
G006E868          020 $  0 010 = 64
G006E870              * 46     * 46
G006E872     * 43 020 ---- 050 T  0
G006E874          124 K 13 050 T  1
G006E876          020 T  0 124 K 11
G006E878          070   10 050 T  2
G006E880          020 J 14 025 T  2
G006E882          052 * 44 010 $  1

G006E884          120    0 004 T  1
G006E886     * 44 044 ---- 060 H 20
G006E888          020 $  0 010 = 36
G006E890                 1
G006E892          020 A 80 050 P 11
G006E894          020 $  0 010 = 66
G006E896          020 A 42 050 P 11
G006E898          020 $  0 010 = 66
G006E899          020 P 15 002 X 13     JUMP IF INTERRUPT
G006E900          020 $  0 010 = 25
G006E902          020 $  0 010 =  7
G006E904          020 $  0 010 = 67
G006E906          020 $  0 010 = 25
G006E908          010 * 41
G006E910     * 45 020 A 42 050 S  1
G006E912          020 $  0 010 = 25     LINE FEED
G006E914          010 X  5
G006E916     * 46 053,0461,222,2016     'FORM'
G006E918          100,0000,000,0000
G006G000     * 50 020 * 90 050 P  2     TYPE VALUES
G006G010          052 * 51 010 $  1
G006G020     * 51 020 ---- 050 P  1     RESTORE P1,P2
G006G030     * 52 020 $  0 101 = 21     EVALUATE EXP
G006G040          020 P  1 124 A 59
G006G050          025 A 59 001 * 53     JUMP IF NOT COMMA
G006G060          020 $  0 010 - 14
G006G070          020 P  1 050 Q  5     PUSH COMMA INTO OPERATOR STACK
G006G080          020 $  0 010 =  1     ADVANCE
G006G090          010 * 52              LOOP
G006G100     * 53 020 P  1 124 K 19
G006G110          025 K 19 001 E  6     JUMP IF NOT TERMINAL
G006G120     * 54 020 $  0 010 = 13     POP Q3 TILL CLEAN
G006G130          020 Q  2 002 * 54
G006G140          020 Q  4 001 * 56
G006G150     * 55 020 $  0 010 = 15     POP Q5 TILL CLEAN
G006G160          020 Q  4 002 * 55
G006G170     * 56 020 * 90 050 P  2
G006G180          052 * 57 010 $  1
G006G190     * 57 020 ---- 050 P  1     RESTORE P1,P2
G006G200     * 58 020 P 15 002 X 13     JUMP IF INTERRUPT
G006G210          020 S  0 050 P 12
G006G220          020 $  0 010 = 21     EVALUTE EXPRESSION
G006G230          040 $  0 010 = 11     UNPACK
G006G240          020 $  0 010 = 13     POP Q3
G006G250          020 P  2 050 P 18
G006G260          020 * 90 050 P  2
G006G270          052 * 59 010 $  1
G006G280     * 59 020 ---- 050 P  1     RESTORE P1,P2
G006G290     * 60 020 $  0 010 =  4     COPY CHARACTER TO OUTPUT
G006G300          020 $  0 010 =  1
G006G310          020 P  2 025 P 18
G006G320          001 * 60 010 $  1     REPEAT UNTIL EXPRESSION IS COPIED
G006G330          020 P 12 025 * 91
G006G340          001 * 61 010 $  1     JUMP IF ROOM FOR VALUE ON SAME LINE
G006G350          020 A 42 050 P 11
G006G360          020 $  0 010 = 66
G006G370          020 $  0 010 = 25
G006G380          020 $  0 050 P 12
G006G390     * 61 020 $  0 010 = 62     INSERT SPACE
G006G400          020 A 43 050 P 11

G006G410          020 $  0 010 = 66     INSERT '='
G006G420          020 $  0 010 = 62     INSERT SPACE
G006G430          023 P  6 001 * 62     JUMP IF NOT ZERO
G006G440          020 $  0 010 = 62     INSERT SPACE
G006G450          020 A 48 050 P 11
G006G460          020 $  0 010 = 66     INSERT ZERO
G006G470          010 * 66
G006G480     * 62 021 P  5 001 * 63
G006G490          020 A 60 014 * 63
G006G500     * 63 020 A 44 050 P 11
G006G510          020 $  0 010 = 66     INSERT SIGN
G006G520          120    0 004 P  6
G006G530          044 N  8 050 H 20
G006G540          060 P 11 010 $  1
G006G550          020 $  0 010 = 66     INSERT FIRST DIGIT
G006G560          020 A 27 050 P 11
G006G570          020 $  0 010 = 66     INSERT DECIMAL POINT
G006G580          020 $  0 010 = 36
G006G590                 3        8
G006G600          023 P  4 002 * 66     JUMP IF SFX = 0
G006G610          020 $  0 010 = 64
G006G620              * 92     * 92
G006G630          020 P  4 001 * 64
G006G640          020 A 60 014 * 64
G006G650     * 64 020 A 44 050 P 11
G006G660          020 $  0 010 = 66     INSERT SIGN OF SFX
G006G670          020 P  4 006 * 65
G006G680     * 65 021 P  4 072   31
G006G690          050 H 20 010 $  1
G006G700          020 $  0 010 = 36     INSERT SFX DIGITS
G006G710              3           2
G006G720          020 A112 050 P 11
G006G730          020 $  0 010 = 66     INSERT RIGHT PAREN
G006G740     * 66 020 A 42 050 P 11
G006G750          020 $  0 010 = 66     INSERT CR+EOM
G006G760          020 $  0 010 = 25     TRANSMIT
G006G770          020 P  1 124 K 19
G006G780          025 K 19 002 X  5     JUMP IF AT TERMINAL
G006G790          020 $  0 010 =  2     ADVANCE TO NONSPACE
G006G800          020 P  2 050 * 90
G006G810          010 * 58
G006G820     * 90 
G006G830     * 91     S 50     S 50
G006G840     * 92 020,0011,407,6111     '.10*('
G006G850          100,0000,000,0000,
G007E000+    G  7 010 $  0              RETURN
G007E010          020 $  0 010 = 38     SIMPLE-INDIRECT TESTS
G007E020          020 A 42 050 S  1     SET UP CR+EOM
G007E030          020 $  0 010 = 25     TRANSMIT
G007E040          010 X  5         ,
G008E000+    G  8 010 $  0              PAGE
G008E010          020 $  0 010 = 38     SIMPLE-INDIRECT TESTS
G008E020          020 $  0 010 = 22
G008E030          010 X  5         ,
G011E000+    G 11 010 $  0              FORM
G011E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G011E015          020 Q  9 002 E  9     ERROR IF INDIRECT
G011E020          020 $  0 010 = 20     CONVERT FORM NUMBER
G011E030          020 $  0 010 = 46     VALIDATE
G011E040          020 Q  3 050 P 22     SET CONTEXT

G011E050          020 $  0 010 = 13     POP Q3
G011E060          020 $  0 010 =  3     ELIMINATE SPACES
G011E070          124 A 80 025 A 80
G011E080          002 *  1 010 E  6     MALFORMED IF NOT COLON
G011E090     *  1 020 $  0 010 =  1     STEP ONE CHARACTER
G011E100          001 *  2 010 E  6     MALFORMED IF NOT TERMINAL MINUS
G011E110     *  2 020 I  1 050 P 13     SET SUBSTATE FOR FORM
G011E120          020 $  0 010 = 55     SWITCH TO USER
G011E130          020 $  0 010 = 53     KICK OUT PROGRAM
G011E140          010 X  1         ,    JUMP TO Q SERVICE
G012E000+    G 12 010 $  0              STOP
G012E010          020 $  0 010 = 38     SIMPLE-INDIRECT TESTS
G012E020          120    0 050 P 17     SET 'STOPPED' FLAG
G012E030          020 S  0 050 P 12
G012E040          020 $  0 010 = 64     PREPARE MESSAGE
G012E050              * 90     * 90
G012E060          020 $  0 010 = 63     COPY STEP NUMBER FROM R TO S
G012E070          020 A 27 050 P 11
G012E080          020 $  0 010 = 66     ADD PERIOD
G012E090          020 A 42 050 P 11
G012E100          020 $  0 010 - 66     ADD CR+EOM
G012E110          020 $  0 010 - 25     SEND 'STOP' MESSAGE
G012E120          020 $  0 010 = 55     SWITCH TO USER
G012E130          020 $  0 010 = 53     KICK OUT PROGRAM
G012E140          010 X  1
G012E150     * 90 071,0631,142,3447     'STOPPED BY STEP'
G012E160          012,4240,341,1070
G012E170          007,0621,461,2447
G012E180          007,2000,000,0000,
G013E000+    G 13 010 $  0              GO
G013E010          020 $  0 010 = 37     SIMPLE-INDIRECT TESTS
G013E020          020 Q 12 050 Q  8
G013E030          020 Q 13 050 Q  9
G013E040          020 K  4 050 Q 12
G013E050          050 Q 13 010 $  1
G013E060          020 P 17 001 *  1     JUMP IF NOT 'STOP'
G013E070          020 K  4 050 P 17     RESET 'STOP' FLAG
G013E080          010 X  5              JUMP TO ADVANCE
G013E090     *  1 020 Q  9 001 *  3     JUMP IF NO OPEN TASK
G013E100          050 P 21 010 $  1
G013E110          020 $  0 010 = 51     FIND CURRENT STEP
G013E120          020 *  2 010 $  1     JUMP IF FOUND
G013E130          020 H 23 001 X  7     JUMP TO ASCEND IF DONE
G013E140          020 H 26 001 X  7     JUMP TO ASCEND IF DONE
G013E150     *  2 050 P 16 010 X  6     JUMP TO FETCH
G013E160     *  3 020 $  0 010 = 55     SWITCH TO USER
G013E170          020 $  0 010 = 53     KICK OUT PROGRAM
G013E180          010 X  1         ,    BACK TO Q SERVICE
G014E000+    G 14 010 $  0              DELETE
G014E010          020 Q  9 002 E  9     ERROR IF INTERNAL
G014E020          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G014E030          020 $  0 010 = 27     ACCUMULATE WORD
G014E040          025 W  0 050 T  0
G014E050          023 T  0 001 * 60     JUMP IF NOT 'ALL'
G014E060          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G014E160          020 $  0 010 - 27     ACCUMULATE WORD
G014E170          004 H 19 010 $  1
G014E180          020 W  8 065 T  0
G014E190          023 T  0 002 * 10     JUMP IF 'PARTS'
G014E200          020 W 10 065 T  0

G014E210          023 T  0 002 * 10     JUMP IF 'STEPS'
G014E220          020 W  4 065 T  0
G014E230          023 T  0 002 * 20     JUMP IF 'FORMS'
G014E240          010 E  6              ELSE MALFORMED
G014E250     * 10 020 $  0 010 * 50     VERIFY TERMINAL
G014E260          020 $  0 010 * 30     DELETE ALL STEPS
G014E270          010 S  5
G014E280     * 20 020 $  0 010 * 50     VERIFY TERMINAL
G014E290          020 $  0 010 * 40     DELETE ALL FORMS
G014E300          010 X  5
G014E310     * 30 024 K  2 052 * 39     LOCAL SUBR TO DEL ALL STEPS(HENCE PARTS)
G014E320          020 Q 10 050 * 90
G014E330     * 31 020 * 90 056 * 32
G014E340          124 K  5 025 K  1
G014E350     * 32 005 * 36 020 ----
G014E360          050 * 90 050 * 91
G014E370     * 33 020 * 91 052 * 34
G014E380          124 K  6 025 K  1
G014E390          005 * 35 010 $  1
G014E400     * 34 004 ---- 060 * 91
G014E410          020 $  0 010 = 29
G014E420     * 35 010 * 33 004 * 90
G014E430          020 $  0 010 = 28
G014E440     * 36 010 * 31 004 Q 10
G014E450          020 $  0 010 = 29
G014E460          120    0 050 Q 10
G014E470     * 39 010 ----
G014E480     * 40 024 K  2 052 * 49     LOCAL USBR TO DELETE ALL FORMS
G014E490          020 Q 11 050 * 91
G014E500     * 41 020 * 91 052 * 42
G014E505          124 K  6 025 K  1
G014E510          005 * 43 010 $  1
G014E515     * 42 004 ---- 060 * 91
G014E520          020 $  0 010 = 29
G014E525     * 43 010 * 41 004 Q 11
G014E530          020 $  0 010 = 28
G014E535          120    0 050 Q 11
G014E540     * 49 010 ----
G014E545     * 50 024 K  2 052 * 59     LOCAL SUBR TO VERIFY TERMINAL
G014E550          020 $  0 010 =  3     ELIMINATE SPACES
G014E555          124 K 19 025 K 19
G014E560     * 59 002 ---- 010 E  6     MALFORMED IF NOT TERMINAL
G014E565     * 60 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G014E570          004 H 19 010 $  1
G014E575          020 W  7 065 T  0
G014E580          023 T  0 002 * 65     JUMP IF 'PART'
G014E585          020 W  9 065 T  0     JUMP IF 'STEP'
G014E590          023 T  0 002 * 70
G014E595          020 W  3 065 T  0     JUMP IF 'FORM'
G014E600          023 T  0 002 * 75
G014E605          010 E  6              ELSE MALFORMED
G014E610     * 65 020 $  0 010 = 21     EVALUATE PART NUMBER
G014E615          020 $  0 010 = 44     VALIDATE PART NUMBER
G014E620          020 $  0 010 * 50     VERIFY TERMINAL
G014E625          020 Q  3 050 P 20
G014E630          020 $  0 010 = 13     POP Q3
G014E635          020 $  0 010 = 50     FIND PART
G014E640          020 $  0 010 E 17     ERROR IF CAN'T
G014E645          020 H 23 050 * 91
G014E650     * 66 020 * 91 052 *  6

=021E360          010 *  9
=021E370     * 10 020 $  0 010 = 12     CONVERT $
=021E380          020 P  0 025 N  1
=021E390          002 * 11 004 P  0
=021E400          032 N  8 014 * 12
=021E410     * 11 004 P  0 032 N  7
=021E420     * 12 020 K 14 064 Q  3
=021E430          010 * 29
=021E440     * 13 020 $  0 010 = 24
=021E450     * 14 020 P  1 124 K 31     FUNCTION
=021E460          025 K 31 001 E  6
=021E470     * 15 020 $  0 010 = 14     MUST BE LEFT GROUPER NEXT
=021E480          020 P  1 050 Q  5
=021E490          020 $  0 010 =  1     stack character in operators
=021E500          020 $  0 010 = 21
=021E505          020 P  1 124 K 32     evaluate expression
=021E510          025 K 32 002 * 16
=021E515          020 P  1 124 A 59
=021E520          025 A 59 002 * 15
=021E525          010 E  6              error if not comma or rt grouper
=021E530     * 16 020 P  1 052 * 17     cc = rt grouper
=021E535     * 17 020 ---- 124 Q  5
=021E540          025 Q  5 002 * 18
=021E545          020 Q  5 124 A 59
=021E550          020 A 59 001 E  6
=021E555          020 $  0 010 = 15
=021E560          020 $  0 010 = 16
=021E565          020 Q  3 050 Q  7
=021E570          020 $  0 010 = 13
=021E575          010 * 17
=021E580     * 18 020 Q  5 124 A 96    MATCHED GROUPERS
=021E585          025 P  1 001 * 19
=021E590          025 A 96 002 E  6    AUX MUST BE EMPTY IF ABS VAL.
=021E595          020 Q  6 125 K 12
=021E600          020 Q  3 010 $  1
=021E605     * 19 020 $  0 010 = 15
=021E610     * 29 020 $  0 010 =  2
=021E615     * 20 020 P  1 124 K 30
=021E620          025 K 30 001 * 23
=021E625          020 Q  5 124 K 30
=021E630          025 K 30 001 * 21
=021E635          020 P  1 124 K 37
=021E640          050 T  0 020 Q  5
=021E645          124 K 37 025 T  0
=021E650          002 * 24 010 $  1
=021E655     * 21 020 $  0 010 = 14    STACK OPERATOR
=021E660          020 P  1 050 Q  5
=021E665          010 * 22
=021E670     * 23 020 Q  5 124 K 30
=021E675          025 K 30 001 * 26
=021E680     * 24 020 Q  5 070   21
=021E685          056 * 25 010 $  1
=021E690     * 25 020 $  0 010 ----    FIRE OPERATOR
=021E695          020 $  0 010 = 15
=021E700          010 * 20
=021E705     * 26 020 Q  5 001 E  6
=021E710          125 K  6 025 K  1
=021E715          001 * 30 020 P  1
=021E720          124 K 32 025 K 32
=021E722          002 * 16 010 E  6

=021E724     * 30 020 Q  5 052 * 27
=021E726          020 $  0 010 = 15    POP Q5
=021E730     * 27 010 ----             EXIT
=021E735     * 28 020 $  0 010 = 14    SUBSCRIPT
=021E740          020 P  1 124 K 17
=021E745          024 * 90 050 Q  5
=021E750          020 $  0 010 =  1
=021E755          010 * 15
=021E760     * 90 000 = 26 440 ----
=021E770     * 91                  ,   PRIVATE WORKING CELL
=022E000+    = 22 010 $  0 010 *  1    TYPE TIME LINE (ENTER RT SUPPRESSESS EJ)
=022E010          050 * 90 010 $  1
=022E020          020 A 31 050 S  1
=022E030          020 S  0 024 K  3
=022E040          050 P 12 010 *  2
=022E050     *  1 050 * 90 010 $  1
=022E060          020 $  0 050 P 12
=022E070     *  2 020 $  0 010 = 61    TIME
=022E080          020 $  0 010 = 62    SPACE
=022E090          020 $  0 010 = 64    DATE
=022E100              H  2     H  2
=022E110          020 $  0 010 = 62    SPACE
=022E120          020 $  0 010 = 64    INITIALS
=022E130              Q  1     Q  1
=022E140          020 $  0 010 = 64    SIX CR'S AND EOM
=022E150              * 91     * 91
=022E160          120    0 050 P  0    RESET LINE COUNTER
=022E170          020 * 90 010 = 25    EXIT VIA=25 TO OUTPUT LINE FROM S
=022E180     * 90 --- ---- --- ----    LINK
=022E190     * 91 027,0561,342,7056
=022E200          025,2000,000,0000,
=023E000+    = 23 010 $  0             EVALUTE CONDITION (RESULT + OR -)
=023E010          024 K  2 052 *  9
=023E020          120    0 050 * 50    SET SIGNAL +
=023E030          020 $  0 010 = 21    EVALUATE EXPRESSION
=023E040     *  1 020 Q  3 050 * 51    SVAE IT
=023E050          020 $  0 010 = 13    POP OPERAND
=023E060          020 P  1 124 K 33
=023E070          025 K 33 001 E  6    CC MUST BE RELATION
=023E080          020 P  1 050 * 52    SAVE IT
=023E090          020 $  0 010 =  1    STEP ONE
=023E100          020 $  0 010 = 21    EVALUATION EXPRESSION
=023E110          020 * 51 050 H 21
=023E120          020 Q  3 050 H 22
=023E130          020 $  0 010 = 70
=023E140          124 * 52 025 K  1
=023E150          001 *  2 010 *  3
=023E160     *  2 020 $  0 050 * 50
=023E170     *  3 020 *  2 124 A109
=023E180          025 A109 001 *  1     JUMP IF NOT AT PERIOD
=023E190          020 $  0 010 = 13     POP OPERAND
=023E200          020 $  0 010 $  1
=023E210     *  9 010 ----              EXIT
=023E220     * 50 --- ---- --- ----     SIGNAL
=023E230     * 51 --- ---- --- ----     LEADING TERM
=023E240     * 52 --- ---- --- ----,    RELATION
=024E000+    = 24 010 $  0              CONVERT FUNCTION TO OPERATOR
=024E010          024 K  2 052 *  9
=024E020          020 $  0 010 = 14
=024E030          020 $  0 010 = 27

=024E040          050 T  0 004 K  2
=024E050          020 * 50 052 *  1
=024E060     *  1 020 ---- 001 E  6
=024E070          025 T  0 001 *  2
=024E080          025 K  1 005 *  3
=024E090     *  2 020 *  1 064 *  1
=024E100     *  3 010 *  1 020 *  1
=024E110          124 K  6 025 * 50
=024E120          024 * 51 050 Q  5     STACK FUNCTION AS OPERATION IN QK AND AC
=024E130     *  9 010 ----
=024E140     * 50     * 60
=024E150     * 51     F  0 440
=024E160     * 60 000,0002,321,2224     SQRT (ORDERED SAME AS F'S)
=024E170          000,0000,014,1707     LOG
=024E180          000,0000,005,3020     EXP
=024E190          000,0000,023,1116     SIN
=024E200          000,0000,003,1723     COS
=024E210          000,0000,000,1120     IP
=024E220          000,0000,000,0620     FP
=024E230          000,0000,023,0630     SFX
=024E240          000,0000,000,0306     CF
=024E250          000,0000,023,0716     SGN
=024E260          000,0000,001,1520     AMP
=024E270          000,0000,015,0130     MAX
=024E280          000,0000,015,1116     MIN
=024E290          100,0000,000,0000,
=025E000+    = 25 010 $  0 010 *  1     OUTPUT LINE FROM S BLOCK TO STN
=025E010          024 K  2 052 P 14     SET EXIT IN P14 (INITIAL ENTRY)
=025E020     *  1 020 $  0 010 =  8     ASSIGN BUFFER (REENTRY POINT)
=025E030          001 *  3 140 S  1     LOAD BUFFER IF ASSIGNED
=025E040          020 H 12 024 U  1
=025E050          052 *  2 020 H 13
=025E060     *  2 025 ---- 001 *  5     EXIT VIA P14 IF CAN'T TL YET
=025E070          025 K  1 002 *  5     EXIT VIA P14 IF CAN'T TL YET
=025E080          020 H 12 024 K 24     OK TO TRANSMIT
=025E090          142 K 24 010 *  5     EXIT VIA P14
=025E100     *  3 020 H 10 001 *  4
=025E110          020 $  0 010 = 47     CHOKED-CHANGED STATE TO L14
=025E120              L 14     L 14
=025E130          010 *  6
=025E140     *  4 020 $  0 010 = 47     Q FOR BUFFER AND PREFERRED PROCESSING
=025E150              L 11     L 11
=025E155     *  6 020 $  0 010 = 53     KICK OUT PROGRAM
=025E160          010 X  1              EXIT TO EXECUTIVE
=025E170     *  5 020 P  0 024 I  1
=025E180          050 P  0 025 J  2
=025E190          001 P 14 020 P 14
=025E200          025 K  2 010 = 22,    EXIT VIA=22 IF NEW PAGE NEEDED
=027E000+    = 27 010 $  0              ACCUMULATE LETTER CODES (6 MAX)
=027E010          024 K  2 052 *  9     RESULT IN ACC WITH SCAN ADVANCED
=027E020          120    0 050 H 19
=027E030     *  1 020 P  1 124 K 34
=027E040          025 K 34 005 *  3
=027E050          020 H 19 004 P  1
=027E060          077    6 050 H 19
=027E070          020 P  2 024 K  3
=027E080          054 P  2 052 *  2
=027E090     *  2 020 ---- 050 P  1
=027E100          020 H 19 025 K 12
=027E110     *  3 001 *  1 020 H 19     LEAVE RESULT IN ACC AND H19

=027E120     *  9 010 ----         ,
=028E000+    = 28 010 $  0              ERASE LEFT LINKED LIST A/C MQ
=028E010          024 K  2 052 *  9
=028E020          060 T  0 124 K  6
=028E030          050 T  0 010 $  1
=028E040     *  1 023 T  0 002 *  9
=028E050          020 T  0 052 *  2
=028E060          052 *  3 070   21
=028E070          004 Q  0 050 Q  0
=028E080     *  2 020 ---- 052 T  0
=028E090     *  3 060 ---- 010 *  1
=028E100     *  9 010 ----         ,
=029E000+    = 29 010 $                 ERASE RIGHT LINKED LIST A/C MQ
=029E010          024 K  2 052 *  9
=029E020          060 T  0 124 K  5
=029E030          050 T  0 010 $  1
=029E040     *  1 023 T  0 002 *  9
=029E050          020 T  0 056 *  2
=029E060          056 *  3 004 Q  0
=029E070     *  2 050 Q  0 020 ----
=029E080     *  3 056 T  0 060 ----
=029E090          010 *  1
=029E100     *  9 010 ----         ,
=030E000     = 30 010 $  0              CHECK RANGE AND PACK RESULT
=030E010          024 K  2 052 *  9
=030E015          023 P  6 006 *  3     CHK FOR ZERO
=030E020          020 P  4 005 *  1
=030E030          025 * 90 005 *  2
=030E040     *  1 010 E  1 024 * 91
=030E050          006 *  2 120    0
=030E060     *  2 014 *  3 020 P  4
=030E070          024 P  5 024 P  6
=030E080     *  3 125 K  4 050 Q  3
=030E090     *  9 010 ----
=030E100     * 90+         100    8
=030E110     * 91+          99    8,
=031E000+    = 31 010 $  0              ADD
=031E010          024 K  2 052 *  9
=031E020          020 $  0 010 = 11     UNPACK 2ND OPERAND
=031E030          020 *  1 010 = 13     POP Q3 AND MERGE WITH =32
=032E000     = 32 010 $  0              SUBTRACT
=032E010          024 K  2 052 *  9
=032E020          020 $  0 010 = 11     UNPACK 2ND OPERAND
=032E030          020 K 12 025 P  5     INVERT SIGN OF 2ND OPERAND
=032E040          050 P  5 010 $  1
=032E050     *  1 020 $  0 010 = 13     POP Q3
=032E060          023 P  6 002 *  9     DONE IF 2ND OPERAND IS ZERO
=032E070          023 Q  3 002 *  8     PACK UP IF 1ST OPERAND IS ZERO
=032E080          020 $  0 010 = 11     UNPACK 1ST OPERAND
=032E090          020 P  4 025 P  7
=032E100          001 *  2 025 K  1     TO *2 IF 2ND SFX IS GREATER
=032E110          002 *  3 020 P  6     TO    IF 1ST SFX IS GREATER
=032E120          025 P  9 002 *  3     TO    IF 1ST CF IS GREATER OR EQUAL
=032E130     *  2 020 P  4 004 P  7     INTERCHANGE OPERANDS
=032E140          050 P  7 060 P  4
=032E150          020 P  5 004 P  8
=032E160          050 P  8 060 P  5
=032E170          020 P  6 004 P  9
=032E180          050 P  9 060 P  6
=032E190     *  3 020 P  5 024 P  8

=032E200          071    9 002 *  4     TO *4 IF SIGNS ARE ALIKE
=032E210          021 P  9 050 P  9     ELSE COMPLEMENT CF OF SMALLER NUMBER
=032E220     *  4 020 P  4 025 P  7
=032E230          025 * 90 002 *  8     TO *8 IF SFX DIFF AS BIG AS 11
=032E240          024 * 90 072   10
=032E250          024 J 11 052 *  5
=032E260     *  5 004 ---- 060 T  0     SET DECIMAL SHIFTER
=032E270          020 P  9 077    1
=032E280          036 P  6 044 T  0     DEVELOP TWICE SUM IN MQ
=032E290          050 T  2 060 T  1     SAVE PIECES
=032E340     * 10 023 T  1 001 * 11
=032E350          023 T  2 001 * 11
=032E360          050 Q  3 010 *  9     SET ZERO RESULT AND EXIT
=032E370     * 11 020 T  1 025 * 91
=032E380          002 * 13 004 N  1
=032E390          032 T  2 044 T  0     SCALE UP ONE DIGIT
=032E400          060 T  3 004 N  1
=032E410          036 T  1 020 P  4
=032E420     * 12 025 K 14 050 P  4     ADJUST SFX
=032E430          060 T  3 025 * 91
=032E440          002 * 13 032 N  1
=032E450          020 P  4 010 * 12     SCALE UP AND GO TO *12
=032E452     * 13 060 T  3 025 * 92
=032E454          001 * 14 020 P  4
=032E456          024 K 14 050 P  4
=032E458          120    0 044 N  1
=032E460     * 14 060 T  3 024 K  1     ROUND
=032E465          072    1 050 P  6       AND SET CF OF RESULT
=032E470     *  8 020 $  0 010 = 30     PACK UP RESULT
=032E480     *  9 010 ----              EXIT
=032E490     * 90+          11    8
=032E500     * 91+   200000000   39
=032E510     * 92+  1999999999   39,
=033E000+    = 33 010 $  0              MULTIPLY
=033E010          024 K  2 052 *  9
=033E020          020 $  0 010 = 11
=033E030          020 $  0 010 = 13
=033E040          023 P  6 001 *  1
=033E050          050 Q  3 010 *  9
=033E060     *  1 023 Q  3 002 *  9
=033E070          020 $  0 010 = 11
=033E080          020 N  9 070    1
=033E090          004 P  9 036 P  6
=033E100          050 T  0 025 * 90
=033E110          001 *  3 025 N  0
=033E120          002 *  2 021 * 91
=033E130          064 T  1 001 *  3
=033E140     *  2 020 T  0 044 N  9
=033E150          060 P  6 020 P  4
=033E160          024 P  7 024 K 14
=033E170          050 P  4 010 *  6
=033E180     *  3 021 * 92 064 T  1
=033E190          004 T  1 001 *  4
=033E200          020 T  0 010 *  5
=033E210     *  4 020 T  0 025 N  0
=033E220     *  5 044 N  8 060 P  6
=033E230          020 P  4 024 P  7
=033E240          050 P  4 010 $  1
=033E250     *  6 020 P  5 024 P  8
=033E260          124 K 12 050 P  5

=033E270          020 $  0 010 = 30
=033E280     *  9 010 ----
=033E290     * 90+      181898   39
=033E300     * 91+517415400576   39
=033E310     * 92+   450000000   39,
=034E000+    = 34 010 $  0              DIVIDE
=034E010          024 K  2 052 *  9
=034E020          023 Q  3 002 E  3
=034E030          020 $  0 010 = 11
=034E040          020 $  0 010 = 13
=034E050          023 Q  3 002 *  9
=034E060          020 $  0 010 = 11
=034E070          020 N  8 050 T  0
=034E080          020 P  4 025 P  7
=034E090          050 P  4 020 P  6
=034E100          025 P  9 002 *  1
=034E110          020 N  9 050 T  0
=034E120          020 P  4 025 K 14
=034E130          050 P  4 010 $  1
=034E140     *  1 020 P  9 072    1
=034E150          004 P  6 036 T  0
=034E160          044 P  9 060 P  6
=034E170          020 P  5 024 P  8
=034E180          124 K 12 050 P  5
=034E190          020 $  0 010 = 30
=034E200     *  9 010 ----         ,
=035E000+    = 35 010 $  0              Y = A*B
=035E010          024 K  2 052 *  9
=035E020          120      050 * 81     SET FLAGS TO ZERO
=035E030          050 * 82 050 * 83
=035E040          023 Q  3 001 *  1     DOES B=0, IF YES
=035E070     *  6 020 N  8 024 * 81     IF NO, RESULT IS ONE, PLUS SIGN
=035E080     * 16 050 Q  3 010 *  9     IN FLAG 1
=035E090     *  1 020 Q  3 050 * 85     STORE B
=035E100          020 $  0 010 = 11     UNPACK B
=035E110          020 P  4 050 * 86     STORE PARTS IN *86,*87,*88
=035E120          020 P  5 050 * 87
=035E130          020 P  6 050 * 88
=035E140          020 $  0 010 = 13     POP B
=035E150          023 Q  3 001 *  2     IF A=0 AND B IS POSITIVE, RESULT IS
=035E160          023 * 87 002 *  9     ZERO.  IF B IS NEGATIVE, ERROR.
=035E170          010 E 23 002 *  9
=035E180     *  2 020 Q  3 050 * 84     STORE A
=035E190          020 $  0 010 = 11     UNPACK A
=035E200          020 P  4 050 * 89     STORE PARTS IN *89,*90,*91
=035E210          020 P  5 050 * 90
=035E220          020 P  6 050 * 91
=035E230          020 * 85 050 Q  3
=035E240          020 $  0 010 F  6     FIND FP OF B
=035E250          023 Q  3 006 *  3     TRANSFER IF B IS AN INTEGER
=035E260          023 * 90 001 E 21     ERROR IF A IS NEGATIVE
=035E270          020 K 12 050 * 82     FLAG 2 IS 2*(-9) FOR B FRACTIONAL
=035E280     *  3 014 *  4 020 * 86
=035E290          072   31 050 T  0     IF SFB IS LESS THAN 9 COMPUTE AND
=035E300          020 I  8 025 T  0     STORE TRUE VALUE OF INTEGRAL B
=035E310          005 *  4 024 J 11     IN *80
=035E320          056 *  5 120
=035E330     *  5 004 * 88 044 ----     TEST UNITS POSITION FOR B ODD OR
=035E340          060 * 80 071   39     EVEN. (SHIFT TO SIGN BIT)
=035E350          006 *  4 020 * 90     IF B IS ODD STORE SIGN OF A
